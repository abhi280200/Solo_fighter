/**
 * d.cpp
 *
 * Written on Friday,30 September 2022.
 */

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvll;
typedef pair<int, int> pi;
typedef pair<ll, ll> pll;
typedef vector<pair<int, int>> vpi;
typedef vector<pair<ll, ll>> vpll;

#define f first
#define s second
#define pb push_back
#define mp make_pair

#define FOR(i, a, b) for (int i = a; i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define FORd(i, a, b) for (int i = (b)-1; i >= a; i--)
#define F0Rd(i, a) for (int i = (a)-1; i >= 0; i--)
#define sz(a) ((int) ((a).size()))

const int MOD = 1e9 + 7;
const ld PI = atan(1) * 4;
const char nl = '\n';

void solve()
{
  int n;
  cin >> n;
  vi b(n);
  F0R(i, n) cin >> b[i];

  // x = a[i]
  // if b[x] = n + 1, all elements before and including i in a <= k
  // else b[x] = a_j, a_j > k

  // if b[x] = 0, all elements before and including i in a > k
  // else b[x] = a_j, a_j <= k

  // for each b[i], if 1 <= b[i] <= n, then in a, the value b[i] is on the left of the value of i
  // analagous b[i] is a[j], i is a[i]

  // if a[i] < a[j], then k > a[i]
  // if a[i] > a[j], k <= a[i];
  int k = -1;
  vi res, lefts;

  map<int, vi> m;
  F0R(i, n) {
    if (b[i] == n + 1) {
      // any elements to the left of i is > k
      if (k == -1) k = i + 1;
      else k = max(i + 1, k);
      lefts.pb(i + 1);
    }
    else if (b[i] == 0) {
      // any elements to the left of i is <= k
      if (k == -1) k = i;
      else k = min(i, k);
      lefts.pb(i + 1);
    }
    else {
      if (i + 1 < b[i]) {
        if (k == -1) {
          k = i + 1;
        }
        else k = max(i + 1, k);
      }
      else {
        if (k == -1) {
          k = i;
        }
        else k = min(i, k);
      }
      m[b[i]].pb(i + 1);
    }
  }

  priority_queue<int> q, t;
  
  for (auto x: lefts) {
    if (!m[x].empty()) t.push(x);
    else res.pb(x);
    q.push(x);
  }

  while (!t.empty()) {
    res.pb(t.front());
    t.pop();
  }

  vi edges;
  while (!q.empty()) {
    edges = m[q.front()];
    vi w;
    for (auto x : edges) {
      if (m[x].empty())
        res.pb(x);
      else
        w.pb(x);
      q.push(x);
    }
    for (auto x : w) {
      res.pb(x);
    }
    q.pop();
  }


  cout << k << nl;
  for (auto x: res) {
    cout << x <<  " ";
  }
  cout << nl;
}

int main()
{
  ios::sync_with_stdio(0); cin.tie(0);
  int t = 1;
  cin >> t;
  while(t--) {
    solve();
  }
}
